{
  "solution1": "def twoSum(self, nums: List[int], target: int) -> List[int]:\n    n = len(nums)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []  # No solution found",
  "solution2": "def twoSum(self, nums: List[int], target: int) -> List[int]:\n    # Create a list of tuples (number, index)\n    nums = [(num, i) for i, num in enumerate(nums)]\n    # Sort the list of tuples by number\n    nums.sort()\n    # Initialize two pointers\n    left, right = 0, len(nums) - 1\n    while left < right:\n        # Calculate the sum of the two numbers\n        total = nums[left][0] + nums[right][0]\n        if total == target:\n            return [nums[left][1], nums[right][1]]\n        elif total < target:\n            left += 1\n        else:\n            right -= 1\n    return []  # No solution found",
  "solution3": "def twoSum(self, nums: List[int], target: int) -> List[int]:\n    # Create a dictionary to store the index of each number\n    num_to_index = {}\n    for i, num in enumerate(nums):\n        if target - num in num_to_index:\n            return [num_to_index[target - num], i]\n        num_to_index[num] = i\n    return []  # No solution found"
}