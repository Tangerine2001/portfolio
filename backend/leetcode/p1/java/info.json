{
  "solution1": "public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[i] + nums[j] == target) {\n                    return new int[]{ i, j };\n                }\n            }\n        }\n\n        return new int[]{ 0, 1 };\n    }",
  "solution2": "private class IndexedValue {\n        private int value;\n        private int index;\n\n        public IndexedValue(int value, int index) { this.value = value; this.index = index; }\n    }\n\n    public int[] twoSum(int[] nums, int target) {\n        ArrayList<IndexedValue> ivs = new ArrayList<>(nums.length);\n        for (int i = 0; i < nums.length; i++) {\n            IndexedValue iv = new IndexedValue(nums[i], i);\n            ivs.add(iv);\n        }\n\n        ivs.sort(Comparator.comparingInt(iv -> iv.value));\n\n        int l = 0, r = nums.length - 1;\n        while (l < r) {\n            if (ivs.get(l).value + ivs.get(r).value == target) {\n                return new int[]{ivs.get(l).index, ivs.get(r).index};\n            } else if (ivs.get(l).value + ivs.get(r).value < target) {\n                l++;\n            } else {\n                r--;\n            }\n        }\n\n        return new int[]{0, 1};\n    }",
  "solution3": "public int[] twoSum(int[] nums, int target) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n\n        for (int i = 0; i < nums.length; i++) {\n            if (map.containsKey(target - nums[i])) {\n                return new int[]{map.get(target - nums[i]), i};\n            }\n            map.put(nums[i], i);\n        }\n\n        return new int[]{0, 1};\n    }"
}