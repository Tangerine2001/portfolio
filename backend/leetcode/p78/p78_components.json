{
  "components": [
    {
      "type": "problem_title",
      "text": "Leetcode 78: Subsets"
    },
    {
      "type": "problem_desc",
      "text": "Given an integer array nums of unique elements, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order."
    },
    {
      "type": "example_case",
      "input": ["nums = [1,2,3]"],
      "output": ["[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]"],
      "explanation": [
        { "type": "text", "text": "You can verify the output with brute force"}
      ]
    },
    {
      "type": "solution_title",
      "text": "Solution 1: Depth-First Search (DFS)"
    },
    {
      "type": "solution_desc",
      "text": "This solution uses a depth-first search (DFS) approach to explore all possible subsets of a given set of numbers. The algorithm generates all subsets by either including or excluding the current element at each step of the recursion. Starting with an empty subset, we recursively decide whether to add each element of the input array to the current subset. Once all elements have been processed, we add the current subset to the result list. The time complexity of this solution is O(2^n), where n is the number of elements in the input array. This is because each element has two possibilities: either being included in the subset or not, resulting in 2^n possible subsets."
    },
    {
      "type": "solution",
      "solution_no": 1
    }
  ]
}