{
    "solutions": {
        "solution1": {
            "python": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        n = len(nums)\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []  # No solution found",
            "java": "public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[i] + nums[j] == target) {\n                    return new int[]{ i, j };\n                }\n            }\n        }\n\n        return new int[]{ 0, 1 };\n    }",
            "go": "func TwoSumBruteForce(nums []int, target int) []int {\n\t// Outer loop to iterate through each element in the slice 'nums' except the last one.\n\tfor i := 0; i < len(nums)-1; i++ {\n\t\t// Inner loop to iterate through each element in the slice 'nums' starting from the element after 'i'.\n\t\tfor j := i + 1; j < len(nums); j++ {\n\t\t\t// Check if the sum of nums[i] and nums[j] equals the target.\n\t\t\tif nums[i]+nums[j] == target {\n\t\t\t\t// If the sum equals the target, return the indices i and j.\n\t\t\t\treturn []int{i, j}\n\t\t\t}\n\t\t}\n\t}\n\t// If no such pair is found, return a default value of indices 0 and 1.\n\t// This could be a placeholder or an indicator that no solution was found.\n\treturn []int{0, 1}\n}"
        },
        "solution2": {
            "python": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # Create a list of tuples (number, index)\n        nums = [(num, i) for i, num in enumerate(nums)]\n\n        # Sort the list of tuples by number\n        nums.sort()\n\n        # Initialize two pointers\n        left, right = 0, len(nums) - 1\n\n        while left < right:\n            # Calculate the sum of the two numbers\n            total = nums[left][0] + nums[right][0]\n            if total == target:\n                return [nums[left][1], nums[right][1]]\n            elif total < target:\n                left += 1\n            else:\n                right -= 1\n\n        return []  # No solution found\n",
            "java": "private class IndexedValue {\n        private int value;\n        private int index;\n\n        public IndexedValue(int value, int index) { this.value = value; this.index = index; }\n    }\n\n    public int[] twoSum(int[] nums, int target) {\n        ArrayList<IndexedValue> ivs = new ArrayList<>(nums.length);\n        for (int i = 0; i < nums.length; i++) {\n            IndexedValue iv = new IndexedValue(nums[i], i);\n            ivs.add(iv);\n        }\n\n        ivs.sort(Comparator.comparingInt(iv -> iv.value));\n\n        int l = 0, r = nums.length - 1;\n        while (l < r) {\n            if (ivs.get(l).value + ivs.get(r).value == target) {\n                return new int[]{ivs.get(l).index, ivs.get(r).index};\n            } else if (ivs.get(l).value + ivs.get(r).value < target) {\n                l++;\n            } else {\n                r--;\n            }\n        }\n\n        return new int[]{0, 1};\n    }",
            "go": "import \"sort\"\n\n// IndexedValue Define a struct to hold the value and the original index\ntype IndexedValue struct {\n\tValue int // The value from the nums slice\n\tIndex int // The original index of the value in the nums slice\n}\n\nfunc TwoSumTwoPointers(nums []int, target int) []int {\n\t// Create a slice of IndexedValue with the same length as nums\n\tindexedArr := make([]IndexedValue, len(nums))\n\n\t// Populate the indexedArr slice with values and their original indices from nums\n\tfor i, v := range nums {\n\t\tindexedArr[i] = IndexedValue{Value: v, Index: i}\n\t}\n\n\t// Sort the indexedArr slice based on the values in ascending order\n\tsort.Slice(indexedArr, func(i, j int) bool {\n\t\treturn indexedArr[i].Value < indexedArr[j].Value\n\t})\n\n\t// Initialize two pointers: l starts at the beginning, r starts at the end of the slice\n\tl, r := 0, len(nums)-1\n\n\t// Loop until the two pointers meet\n\tfor l < r {\n\t\t// Get the values at the two pointers\n\t\tlValue := indexedArr[l].Value\n\t\trValue := indexedArr[r].Value\n\n\t\t// Calculate the sum of the two values\n\t\tsum := lValue + rValue\n\n\t\t// Check if the sum is equal to the target\n\t\tif sum == target {\n\t\t\t// If the sum equals the target, return the original indices of the two values\n\t\t\treturn []int{indexedArr[l].Index, indexedArr[r].Index}\n\t\t} else if sum < target {\n\t\t\t// If the sum is less than the target, move the left pointer to the right\n\t\t\tl += 1\n\t\t} else if sum > target {\n\t\t\t// If the sum is greater than the target, move the right pointer to the left\n\t\t\tr -= 1\n\t\t}\n\t}\n\n\t// If no such pair is found, return a default value of indices 0 and 1.\n\t// This could be a placeholder or an indicator that no solution was found.\n\treturn []int{0, 1}\n}\n"
        },
        "solution3": {
            "python": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # Create a dictionary to store the index of each number\n        num_to_index = {}\n        for i, num in enumerate(nums):\n            if target - num in num_to_index:\n                return [num_to_index[target - num], i]\n            num_to_index[num] = i\n\n        return []  # No solution found\n",
            "java": "public int[] twoSum(int[] nums, int target) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n\n        for (int i = 0; i < nums.length; i++) {\n            if (map.containsKey(target - nums[i])) {\n                return new int[]{map.get(target - nums[i]), i};\n            }\n            map.put(nums[i], i);\n        }\n\n        return new int[]{0, 1};\n    }",
            "go": "func TwoSumHashMap(nums []int, target int) []int {\n\t// Create a map to keep track of the numbers we have seen and their indices.\n\tseen := make(map[int]int)\n\n\t// Populate the map with the value as the key and the index as the value.\n\tfor index, value := range nums {\n\t\tseen[value] = index\n\t}\n\n\t// Iterate through each element in the nums slice.\n\tfor i := 0; i < len(nums); i++ {\n\t\t// Check if the complement (target - nums[i]) exists in the map\n\t\t// and ensure it is not the same element by checking the indices.\n\t\tif j, ok := seen[target-nums[i]]; ok && i != j {\n\t\t\t// If the complement exists and is not the same element, return the indices.\n\t\t\treturn []int{i, j}\n\t\t}\n\t}\n\n\t// If no such pair is found, return a default value of indices 0 and 1.\n\t// This could be a placeholder or an indicator that no solution was found.\n\treturn []int{0, 1}\n}"
        }
    },
    "components": [
        {
            "type": "problem_title",
            "text": "Leetcode 1: Two Sum"
        },
        {
            "type": "problem_desc",
            "text": "Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice."
        },
        {
            "type": "example_case",
            "input": [
                "nums = [2, 7, 11, 15]",
                "target = 9"
            ],
            "output": [
                "[0, 1]"
            ],
            "explanation": [
                {
                    "type": "code",
                    "text": "nums[0] + nums[1] = 2 + 7 = 9"
                },
                {
                    "type": "text",
                    "text": ", return"
                },
                {
                    "type": "code",
                    "text": "[0, 1]"
                }
            ]
        },
        {
            "type": "solution_title",
            "text": "Solution 1: Brute Force"
        },
        {
            "type": "solution_desc",
            "text": "The obvious solution to this problem is to simply iterate through the array and check if the sum of the current element and any other element in the array is equal to the target. This solution has a time complexity of O(n^2) and a space complexity of O(1)."
        },
        {
            "type": "solution",
            "solution_no": 1
        },
        {
            "type": "solution_title",
            "text": "Solution 2: Two Pointers"
        },
        {
            "type": "solution_desc",
            "text": "A more efficient solution is to sort the array and then use two pointers to find the two numbers that add up to the target. This solution has a time complexity of O(n log n) and a space complexity of O(n)."
        },
        {
            "type": "solution",
            "solution_no": 2
        },
        {
            "type": "solution_title",
            "text": "Solution 3: Hash Table"
        },
        {
            "type": "solution_desc",
            "text": "The fastest solution is to use a hash table to store the elements of the array along with their indices. This way, we can check if the complement of the current element is in the hash table in constant time. This solution has a time complexity of O(n) and a space complexity of O(2^n)."
        },
        {
            "type": "solution",
            "solution_no": 3
        }
    ]
}