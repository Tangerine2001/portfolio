{
    "solutions": {
        "solution1": {
            "python": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        # Sort to make it easier to not select duplicate values\n        nums = sorted(nums)\n\n        res = []\n        curr = []\n        def dfs(i):\n            if i >= len(nums):\n                res.append(curr.copy())\n                return\n\n            # Include i\n            curr.append(nums[i])\n            dfs(i + 1)\n\n            # Don't include i. Move i to next value not equal to nums[i]\n            value = curr.pop()\n            while i < len(nums) and nums[i] == value:\n                i += 1\n            dfs(i)\n\n        dfs(0)\n        return res"
        }
    },
    "components": [
        {
            "type": "problem_title",
            "text": "Leetcode 90: Subsets II"
        },
        {
            "type": "problem_desc",
            "text": "Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order."
        },
        {
            "type": "example_case",
            "input": [
                "nums = [1,2,1]"
            ],
            "output": [
                "[[],[1],[1,2],[1,1],[1,2,1],[2]]"
            ],
            "explanation": [
                {
                    "type": "text",
                    "text": "You can verify the output with brute force"
                }
            ]
        },
        {
            "type": "example_case",
            "input": [
                "nums = [7,7]"
            ],
            "output": [
                "[[],[7], [7,7]]"
            ],
            "explanation": [
                {
                    "type": "text",
                    "text": "You can verify the output with brute force"
                }
            ]
        },
        {
            "type": "solution_title",
            "text": "Solution 1: Sort then Skip Duplicates"
        },
        {
            "type": "solution_desc",
            "text": "The key to solving this problem is to avoid duplicate subsets by carefully controlling which elements are added during the subset generation. We begin by sorting the input array, which makes it easier to detect and skip duplicate values during the recursion. The approach uses a depth-first search (DFS) strategy to explore all possible subsets. At each step, the current element is either included in the subset or skipped. If the current element is the same as the previous one, we skip it to avoid generating duplicate subsets. This ensures that only unique combinations are considered. The time complexity of this solution is O(2^n * n), where n is the length of the input array. The 2^n factor accounts for generating all possible subsets, while the n factor comes from sorting the input array and handling each subset copy."
        },
        {
            "type": "solution",
            "solution_no": 1
        }
    ]
}